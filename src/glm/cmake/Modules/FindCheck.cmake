# - find Check library
# CHECK_INCLUDE_DIR - Where to find Check header files (directory)
# CHECK_LIBRARIES - Check libraries
# CHECK_LIBRARY_RELEASE - Where the release library is
# CHECK_LIBRARY_DEBUG - Where the debug library is
# CHECK_FOUND - Set to TRUE if we found everything (library, includes and executable)

# Copyright (c) 2014 Christian Heckendorf
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler

IF( CHECK_INCLUDE_DIR AND CHECK_LIBRARY_RELEASE AND CHECK_LIBRARY_DEBUG )
	SET(CHECK_FIND_QUIETLY TRUE)
ENDIF( CHECK_INCLUDE_DIR AND CHECK_LIBRARY_RELEASE AND CHECK_LIBRARY_DEBUG )

FIND_PATH( CHECK_INCLUDE_DIR check.h  )

FIND_LIBRARY(CHECK_LIBRARY_RELEASE NAMES check )

FIND_LIBRARY(CHECK_LIBRARY_DEBUG NAMES check checkd  HINTS /usr/lib/debug/usr/lib/ )

IF( CHECK_LIBRARY_RELEASE OR CHECK_LIBRARY_DEBUG AND CHECK_INCLUDE_DIR )
	SET( CHECK_FOUND TRUE )
ENDIF( CHECK_LIBRARY_RELEASE OR CHECK_LIBRARY_DEBUG AND CHECK_INCLUDE_DIR )

IF( CHECK_LIBRARY_DEBUG AND CHECK_LIBRARY_RELEASE )
	# if the generator supports configuration types then set
	# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
	IF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		SET( CHECK_LIBRARIES optimized ${CHECK_LIBRARY_RELEASE} debug ${CHECK_LIBRARY_DEBUG} )
	ELSE( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		# if there are no configuration types and CMAKE_BUILD_TYPE has no value
		# then just use the release libraries
		SET( CHECK_LIBRARIES ${CHECK_LIBRARY_RELEASE} )
	ENDIF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
ELSEIF( CHECK_LIBRARY_RELEASE )
	SET( CHECK_LIBRARIES ${CHECK_LIBRARY_RELEASE} )
ELSE( CHECK_LIBRARY_DEBUG AND CHECK_LIBRARY_RELEASE )
	SET( CHECK_LIBRARIES ${CHECK_LIBRARY_DEBUG} )
ENDIF( CHECK_LIBRARY_DEBUG AND CHECK_LIBRARY_RELEASE )

IF( CHECK_FOUND )
	IF( NOT CHECK_FIND_QUIETLY )
		MESSAGE( STATUS "Found Check header file in ${CHECK_INCLUDE_DIR}")
		MESSAGE( STATUS "Found Check libraries: ${CHECK_LIBRARIES}")
	ENDIF( NOT CHECK_FIND_QUIETLY )
ELSE(CHECK_FOUND)
	IF( CHECK_FIND_REQUIRED)
		MESSAGE( FATAL_ERROR "Could not find Check" )
	ELSE( CHECK_FIND_REQUIRED)
		MESSAGE( STATUS "Optional package Check was not found" )
	ENDIF( CHECK_FIND_REQUIRED)
ENDIF(CHECK_FOUND)

